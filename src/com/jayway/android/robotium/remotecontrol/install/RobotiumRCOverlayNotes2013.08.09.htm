<html>
<head><title>Robotium Remote Control Overlay Notes</title></head>
<body>
<a name="top" />
<h1><center>
Robotium Remote Control Overlay Notes<br/>
2013.08.09<br></center></h1>
<p>
<a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Test Development</a>,&#032;
<a href="#newstuff">What's New</a>&#032;
<hr/><! ======================================================================>
<a name="definitions" />
<p>
<h3><b>Definitions:</b><br/></h3>
<table border=0 cellspacing=7 >
<tr><td><b>Overlay</b><td>Overwrite an existing install with upgraded assets (Libraries, Scripts, Source, etc).
<tr><td><b>
SAFS</b><td><b><a href="http://safsdev.sourceforge.net" target=_blank alt="SAFSDEV Home Page" >
Software Automation Framework Support</a></b>
</td>
<tr><td><b>Device</b><td>The actual Android device to be used for testing.<br>
An Emulator is also considered a device.
<tr><td><b>On-Device</b><td>Code or applications on the device targetted for testing.
<tr><td><b>AUT</b><td>App Under Test--the on-device <b>target APK</b> to be tested.
<tr><td><b>Messenger</b><td>The on-device <b>SAFS TCP Messenger APK</b> for Android testing.
<tr><td><b>RobotiumTestRunner</b><td>The on-device <b>RobotiumTestRunner APK</b> for Robotium Remote Control Android testing.
<tr><td><b>SAFSTestRunner</b><td>The on-device <b>SAFSTestRunner APK</b> for SAFS Robotium Remote Control Android testing with SAFS extensions.
<tr><td><b>Controller</b><td>The computer used to remotely control the test on the device.<br>
For simplicity, the test development machine and the Controller are assumed to be the same.
<tr><td><b>The Test</b><td>The AUT-specific Java test code developed for execution on the remote Controller.
</table>

<hr/><! ======================================================================>
<a name="reminders" />
<small><a href="#definitions">Definitions</a>,&#032;
<a href="#instructions">Overlay Instructions</a>,&#032;
<a href="#setupnotes">Test Development</a>,&#032;
<a href="#newstuff">What's New</a>&#032;
</small>
<p>
<h3><b>Critical Reminders:</b><br/></h3>
<p>
<ol>
<li>This Overlay requires a previous installation of Robotium RemoteControl.&nbsp;
It is intended to overlay/overwrite key portions of <b>RobotiumRCRelease2013.07.12</b>.
<p>
<li>This is a cumulative Overlay. &nbsp;This means it contains ALL the assets modified since the Release above--including any Overlay assets that may have been available after the Release but prior to this Overlay. &nbsp;Consequently, you do not have to install multiple Overlays following the Release. &nbsp;Only the latest one needs to be applied.
<p>
<b><li>This Overlay introduces the use of the enhanced  <big>'safs-remotecontrol.jar'</big>  and removes the use of robotium-remotecontrol.jar.</b>
<p>
<li>The 201307.12 Release and this Overlay are intended for use with Robotium 4.2 testing on Android API Levels 15 and above.&nbsp; You should use earlier releases of Robotium RemoteControl using Robotium 3.6 to test pre-V4 versions of the Android operating system.
</ol>
<p>

<hr/><! ======================================================================>
<a name="instructions" />
<small><a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#setupnotes">Test Development</a>,&#032;
<a href="#newstuff">What's New</a>&#032;
</small>
<p>
<h3><b>Install Instructions:</b><br/></h3>
<p>
It is assumed all RobotiumRC installation requirements have been met.&nbsp; If that is not the case, then you should perform a full Release install and not an Overlay.&nbsp; You can apply an Overlay after installing a Release.
<p><ol>
<p>
NOTE:
<ul>To test on an <b>Android Emulator</b>, you must verify/prepare an appropriate 'AVD' with the '<b>AVD Manager</b>' tool provided with the Android SDK. &nbsp;Refer to the Android Developers documentation for details.
<p>
To test on a real device, you must verify/prepare any required connections and/or drivers for your device. &nbsp;Refer to the Android Developers documentation for details.
</ul>

<p>
<li><b>Double-click or otherwise extract the contents of the RobotiumRCOverlay ZIP into a directory.</b>: &lt;workdir>
<p>
<li><b>In a CMD/Shell/Terminal window navigate to the &lt;workdir> directory and execute the appropriate installation script</b>:
<p>
<ul><b><u>Running the Install Script:</u></b>
<pre>
Windows: Overlay-Win.bat %ANDROID_HOME% or &lt;path-to-android-sdk>
   Unix: Overlay-Unx.sh  $ANDROID_HOME  or &lt;path-to-android-sdk>
    Mac: Overlay-Mac.sh  $ANDROID_HOME  or &lt;path-to-android-sdk>
</pre>
<p>
On Mac, and possibly some incantations of Unix, the user may be required to use <b>sudo</b> as follows:
<p>
<b>sudo&nbsp;&nbsp;./Overlay-Mac.sh&nbsp;&nbsp;$ANDROID_HOME</b><br>
or<br>
<b>sudo&nbsp;&nbsp;./Overlay-Unx.sh&nbsp;&nbsp;$ANDROID_HOME</b><br>
<p>
If the script does not run at all:
<p><ul>
<li>make sure the scripts are executable:
<p>
<ul>
chmod a+x *.sh<br>
</ul>
<p>
<li>prefix the shell: '/bin/sh Overlay-Mac.sh'<br>
(Don't forget to use <b>sudo</b>, if necessary.)
</ul>
</ul>
<p>
<li><b>Rebuild SAFSTCPMessenger-debug.apk</b>:
<p>
This step can be skipped if the Messenger was built automatically during the Overlay.
<p>
This build is required only once with your specific developer debug profile/certificate following an Overlay.
<p>
<ul>
<li>Go to the <b>SAFSTCPMessenger</b> project and verify/edit the file <b>local.properties</b>:
<p><ul>
<b>sdk.dir</b>=&lt;path-to-android-sdk><br>
<b>safs.droid.automation.libs</b>=&lt;path-to\RobotiumTestRunner\libs>  OR<br>
<b>safs.droid.automation.libs</b>=&lt;path-to\SAFSTestRunner\libs><br>
<b>target</b>=Google Inc.:Google APIs:15 (or a higher Android SDK API level that is installed)
<p>
(Use &lt;path-to\SAFSTestRunner\libs> if you intend to use the SAFSTestRunner instead.<br>
&nbsp;This line simply insures the safstcpmessenger.jar is up-to-date for the target TestRunner.)
</ul>
<p>
<li>In a CMD/Shell/Terminal window navigate to the <b>SAFSTCPMessenger</b> project directory.
<li>Enter '<b>ant debug</b>' to build the <b>SAFSTCPMessenger-debug.apk</b>.
<li>Verify the APK was built in the <b>SAFSTCPMessenger</b> '<b>bin</b>' subfolder.
    <p>On Windows:<br>
    If you receive a <b>BUILD FAILED</b> message along with "Could not create task or type of type: componentdef.":
    <p><ul>
    There is a CLASSPATH issue which is usually resolved by eliminating the System CLASSPATH in the CMD window with:
    <p><ul>set CLASSPATH=&nbsp;(leave blank)</ul>
    <p>
    Then try the '<b>ant debug</b>' command again in that same CMD window.
    </ul>
</ul>
<p>
<li><b>Rebuild RobotiumTestRunner-debug.apk</b>:
<p>
This step can be skipped if the TestRunner was built automatically during the Overlay.
<p>
This build is required only once per AUT with your specific developer debug profile/certificate after an Overlay.<br>
<p>
<ul>
<li>Go to the <b>RobotiumTestRunner</b> project and verify/edit the file <b>local.properties</b>:
<p><ul>
<b>sdk.dir</b>=&lt;path-to-android-sdk><br>
<b>target</b>=Google Inc.:Google APIs:15 (or a higher Android SDK API level that is installed)
</ul>
<p>
<li>For each one-time TestRunner build, edit the RobotiumTestRunner <b>AndroidManifest.xml</b> file:<br>
Within the '<b>&lt;instrumentation </b>' element set the '<b>android:targetPackage</b>' attribute to match the package of the AUT you will be testing:
<p><ul>android:targetPackage="com.my.company.app.package"</ul>
<p>
(As an advanced feature, the framework can rebuild the RobotiumTestRunner at runtime to match the targetPackage of whatever AUT is specified for testing.)
<p>
<li>In a CMD/Shell/Terminal window navigate to the <b>RobotiumTestRunner</b> project directory.
<li>Enter '<b>ant debug</b>' to build the <b>RobotiumTestRunner-debug.apk</b>.
<li>Verify the APK was built in the <b>RobotiumTestRunner</b> '<b>bin</b>' subfolder.
    <p>On Windows:<br>
    If you receive a <b>BUILD FAILED</b> message along with "Could not create task or type of type: componentdef.":
    <p><ul>
    There is a CLASSPATH issue which is usually resolved by eliminating the System CLASSPATH in the CMD window with:
    <p><ul>set CLASSPATH=&nbsp;(leave blank)</ul>
    <p>
    Then try the '<b>ant debug</b>' command again in that same CMD window.
    </ul>
</ul>
<p>
<li><b>Rebuild SAFSTestRunner-debug.apk (Optional)</b>:
<p>
This step can be skipped if the TestRunner was automatically built during the Overlay.
<p>
This build is required once per AUT with your specific developer debug profile/certificate after an Overlay.<br>
<p>
<ul>
<li>Go to the <b>SAFSTestRunner</b> project and verify/edit the file <b>local.properties</b>:
<p><ul>
<b>sdk.dir</b>=&lt;path-to-android-sdk><br>
<b>target</b>=Google Inc.:Google APIs:15 (or a higher Android SDK API level that is installed)
</ul>
<p>
<li>For a one-time TestRunner build, edit the SAFSTestRunner <b>AndroidManifest.xml</b> file:<br>
Within the '<b>&lt;instrumentation </b>' element set the '<b>android:targetPackage</b>' attribute to match the package of the AUT you will be testing:
<p><ul>android:targetPackage="com.my.company.app.package"</ul>
<p>
(As an advanced feature, the framework can rebuild the SAFSTestRunner at runtime to match the targetPackage of whatever AUT is specified for testing.)
<p>
<li>In a CMD/Shell/Terminal window navigate to the <b>SAFSTestRunner</b> project directory.
<li>Enter '<b>ant debug</b>' to build the <b>SAFSTestRunner-debug.apk</b>.
<li>Verify the APK was built in the <b>SAFSTestRunner</b> '<b>bin</b>' subfolder.
    <p>On Windows:<br>
    If you receive a <b>BUILD FAILED</b> message along with "Could not create task or type of type: componentdef.":
    <p><ul>
    There is a CLASSPATH issue which is usually resolved by eliminating the System CLASSPATH in the CMD window with:
    <p><ul>set CLASSPATH=&nbsp;(leave blank)</ul>
    <p>
    Then try the '<b>ant debug</b>' command again in that same CMD window.
    </ul>
</ul>
<p>
<li><b>Repackage your AUT APK with your tester/developer debug profile</b>(if needed):<br>
<p>
This step can be skipped if the SampleSpinner app was automatically re-signed during the Overlay.
<p>
This step may be required for each subsequent AUT build if it was not already signed with your specific developer debug profile/certificate.
<p><ul>
<li>3rd-party '<b>re-sign.jar</b>' is located in the <b>SoloRemoteControl</b> '<b>libs</b>' subfolder.
<li>The re-sign application takes 2 parameters:
<p>
<ol>
<li>&lt;in> path to AUT apk to re-sign
<li>&lt;out> path to newly created AUT-debug.apk
</ol>
<p>
<li>In a CMD/Shell/Terminal window run the re-sign Java program:<br>
(Practice on the SampleSpinner APK provided with RobotiumRC)
<p>
<b>java&nbsp;-jar&nbsp;&lt;path\to\re-sign.jar>&nbsp;&lt;path\to\SpinnerActivity.apk>&nbsp;&lt;out\to\SpinnerActivity-debug.apk></b>
<p>
<li>Verify the AUT-debug.apk was built in the target output path.
</ul>
<p>
As a reminder, re-signing the AUT can be done automatically at runtime by properly specifying the <b>resignjar</b>
command-line parameter available to
<a href="http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/SoloTest.html" target="_blank" title="SoloTest JavaDoc">SoloTest</a> subclasses.
&nbsp; Learn more about that in the section below.
</ol>

<hr/><! ======================================================================>
<a name="setupnotes" />
<small><a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;
<a href="#newstuff">What's New</a>&#032;
</small>
<p>
<h3><b>Test Development:</b><br/></h3>
<p>
You can use the <b>SoloRemoteControl</b> project installed with Robotium RemoteControl as a reference for your own Java development project.<br>
The <b>SoloRemoteControl/src</b> directory contains all the sourcecode contained in the safs-remotecontrol.jar.
<p>
<ol>
<li><b>Create your Java development project and reference the following JAR files</b>:<br>
These can be found in <b>SoloRemoteControl/libs</b>:
<p><ul><pre>
<big><b>safs-remotecontrol.jar (robotium-remotecontrol.jar is no longer used.)</b></big>
robotium-serializable.jar&nbsp;->(only needed if <a href="http://safsdev.sourceforge.net/sqabasic2000/UsingRobotiumRCSerializable.htm#custom" target="using" alt="Using Serializable Classes Doc" title="Using Serializable Classes Doc">using new/custom serialized classes</a>)
safsautoandroid.jar
safssockets.jar

re-sign.jar (is also present, but is not normally part of a development project)

The following can be found at <b>&lt;path-to-android-sdk>/tools/lib</b>

ddmlib.jar

</pre></ul>
<p>
<li><b>Create your MyTest class</b>:<br>
For simplicity, this class should extend the <a href="http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/SoloTest.html" target="_blank" title="SoloTest JavaDoc">Robotium SoloTest class</a>.<br>
Or the <a href="http://safsdev.sourceforge.net/doc/org/safs/android/remotecontrol/SoloTest.html" target="_blank" title="SAFS SoloTest JavaDoc">SAFS SoloTest class</a>.<br>
<p>
The SAFS SoloTest version allows the user to take advantage of the SAFSTestRunner instead of the RobotiumTestRunner. &nbsp;The SAFS TestRunner provides access to <a href="http://safsdev.sourceforge.net/doc/org/safs/android/remotecontrol/SAFSDriverCommands.html" target="_blank" title="SAFS Driver Commands JavaDoc">SAFS Driver Commands</a> and <a href="http://safsdev.sourceforge.net/doc/org/safs/android/remotecontrol/SAFSEngineCommands.html" target="_blank" title="SAFS Engine Commands JavaDoc">SAFS EngineCommands</a> and other exposed SAFS functionality without requiring the full install and capability of the complete SAFS Automation Framework.
<p>
The source for both of these SoloTest classes can be found in the appropriate SoloRemoteControl/src subfolders.
<p>
You can find a copy of the example MyTest code below in the SoloRemoteControl/src folder at:
<p>

<ul><b>com/jayway/android/robotium/remotecontrol/MyTest.java</b></ul>

<p>
This example uses the smaller Robotium SoloTest class and the RobotiumTestRunner instead of the enhanced SAFS SoloTest  class using the SAFSTestRunner option, but the concepts are the same for both.
<p>
Your MyTest class will need to minimally import a few classes:
<p>
<ul><pre>
import java.util.Properties;
import com.jayway.android.robotium.remotecontrol.solo.Message;
import com.jayway.android.robotium.remotecontrol.solo.SoloTest;
import com.jayway.android.robotium.remotecontrol.solo.Solo;

public class MyTest extends SoloTest{

}
</pre></ul>

<p>
<li><b>Override/Provide and invoke the same constructors as SoloTest</b>:
<ul><pre>
public MyTest(){ super(); }
public MyTest(String[] args){ super(args); }
public MyTest(String messengerApk, String testRunnerApk, String instrumentArg){
    super(messengerApk, testRunnerApk, instrumentArg);
}
</pre></ul>
<p>
<li><b>Override the static 'main' method for MyTest</b>:
<ul><pre>
public static void main(String[] args){
    SoloTest soloTest = new MyTest(args);
    soloTest.process();
}
</pre></ul>


<p>
<li><b>Override and implement your 'test()' method</b>:<br>
This is where your remote control test code will go.<br>
Below is a simple example of using the remote control API:
<ul><pre>
protected void test(){
  try{

      String activityID = solo.getCurrentActivity();
      Properties props = solo._last_remote_result;
      String activityName = props.getProperty(Message.PARAM_NAME);
      String activityClass = props.getProperty(Message.PARAM_CLASS);

      System.out.println("CurrentActivity   UID: "+ activityID);
      System.out.println("CurrentActivity Class: "+ activityClass);
      System.out.println("CurrentActivity  Name: "+ activityName);

  }catch(Exception e){

      e.printStackTrace();

  }
}
</pre></ul>
<p><pre>
Refer to RobotiumTestRunner support<br>
          JavaDoc in <a href="http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/package-summary.html" target="packageFrame" alt="RobotiumRC API" title="RobotiumRC API">com.jayway.android.robotium.remotecontrol.solo</a>
          JavaDoc in <a href="http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/package-summary.html" target="packageFrame" alt="RobotiumRC API" title="RobotiumRC API">com.jayway.android.robotium.remotecontrol</a>
<p>
Additional SAFSTestRunner JavaDoc support<br>
          JavaDoc in <a href="http://safsdev.sourceforge.net/doc/org/safs/android/remotecontrol/package-summary.html" target="packageFrame" alt="SAFS RobotiumRC API" title="SAFS RobotiumRC API">org.safs.android.remotecontrol</a>

Also review: <a href="http://safsdev.sourceforge.net/sqabasic2000/UsingRobotiumRCSerializable.htm" target="using" alt="Using Serializable Classes Doc" title="Using Serializable Classes Doc">Using Serializable in Robotium RemoteControl</a>
</pre><p>
<li><b>Compile your work appropriate for your development environment</b>:<br>
Remember, the minimum JAR files needed in the Java build path (CLASSPATH):
<p><ul><pre>
<big><b>safs-remotecontrol.jar (robotium-remotecontrol.jar is no longer used.)</b></big>
robotium-serializable.jar   (only needed if <a href="http://safsdev.sourceforge.net/sqabasic2000/UsingRobotiumRCSerializable.htm#custom" target="using" alt="Using Serializable Classes Doc" title="Using Serializable Classes Doc">using new/custom serialized classes</a>)
safsautoandroid.jar
safssockets.jar
ddmlib.jar                  (&lt;path-to-android-sdk>/tools/lib)
</pre></ul>
<p>
<li><b>Run the test using all appropriate <a href="http://safsdev.sourceforge.net/doc/com/jayway/android/robotium/remotecontrol/solo/SoloTest.html" target="_blank" title="SoloTest JavaDoc">command-line parameters for SoloTest</a></b>:<br>
Remember, the same JAR files needed for the build are needed in the CLASSPATH for execution.
<p>
For example, the following command (all on one line) for the RobotiumTestRunner:
<ul><pre>
java <b>com.jayway.android.robotium.remotecontrol.MyTest</b>
     aut=&lt;path-to-your/aut-debug.apk>
     messenger=&lt;path-to/SAFSTCPMessenger-debug.apk>
     runner=&lt;path-to/RobotiumTestRunner-debug.apk>
     instrument=com.jayway.android.robotium.remotecontrol.client/com.jayway.android.robotium.remotecontrol.client.RobotiumTestRunner
     avd=SprintEvo (only if sending to an emulator)
</pre></ul>
<p>
The equivalent command (all on one line) for the SAFSTestRunner:
<ul><pre>
java <b>com.jayway.android.robotium.remotecontrol.MyTest</b>
     aut=&lt;path-to-your/aut-debug.apk>
     messenger=&lt;path-to/SAFSTCPMessenger-debug.apk>
     runner=&lt;path-to/SAFSTestRunner-debug.apk>
     instrument=org.safs.android.engine/org.safs.android.engine.DSAFSTestRunner
     avd=SprintEvo (only if sending to an emulator)
</pre></ul>
<p>
Of course, you can hardcode your arguments and paths in MyTest.java, or create a script file that performs the invocation for you.&nbsp; We show the arguments here so the user can get an idea of what is involved, and arguments that might be able to be changed with the same test class.&nbsp;For example, the installed MyTest example is able to run the same test with either the RobotiumTestRunner, or the SAFSTestRunner specified in the <b>runner</b> and <b>instrument</b> arguments.&nbsp; The same test can be run against different AVDs or devices, too.
<p>
Hopefully, upon execution you should see a torrent of activity appear in the console and, eventually, the SAFS Messenger service go active on the device/emulator. &nbsp;This would be followed by the launching of the AUT, a brief pause for the execution of the getCurrentActivity call, and then a shutdown of the AUT and SAFS Messenger service.
<p>
If all went well, you should see your System.out text not too far from the end of the console output.  The output will contain something like:
<p>
<ul><pre>
CurrentActivity   UID: 669d9657-6d3b-4706-994b-6cb6a7cc3235
CurrentActivity Class: com.android.example.spinner.SpinnerActivity
CurrentActivity  Name: SpinnerActivity
</pre>
</ul>
</ol>
<hr>
<h3>Take your test automation even further...</h3>
<p>
Robotium Remote Control has been initially coded as a subproject of the <a href="http://safsdev.sourceforge.net" target="_blank" title="SAFSDEV Project Home Page">SAFSDEV Project</a>.
<p>
SAFSDEV has integrated this into the larger and more full-featured SAFS test automation framework. &nbsp;One development environment. &nbsp;
One JSAFS API--regardless of the application technology being tested or the tool integrations used to test it. &nbsp;Thus providing extensive support for all of the technologies below within a single reusable testing framework.
<p><ul>
<li>Java on Windows
<li>Web Apps on Windows
<li>Flex Apps on Windows
<li>.NET, WPF on Windows
<li><b>Apple IOS for iPhone and iPad Apps</b>
<li><b>Android Tablet and Phone Apps</b>
<li><B>Image-Based Testing</b> (Anything on PC/MAC screen)
<li><b>Extensive NLS Support</b> (One test, many languages)
<li>Fully extendable for integrating other technologies and platforms.
</ul>
<p>
<b>SAFS Engines</b> (Tool Integrations):
<p><ul>
<li>SAFS Android w/ Android SDK
<li>Robotium Remote Control w/ Android SDK
<li>Apple XCode SDK w/ IOS UIAutomation
<li>SmartBear/AutomatedQA Test Complete
<li>IBM Rational Functional Tester
<li>IBM Rational Robot
<li>Java AWT Robot w/ Java Advanced Imaging (JAI)
</ul>

<hr/><! ======================================================================>
<a name="newstuff" />
<small><a href="#definitions">Definitions</a>,&#032;
<a href="#reminders">Critical Reminders</a>,&#032;
<a href="#instructions">Install Instructions</a>,&#032;
<a href="#setupnotes">Test Development</a>&#032;
</small>
<p>
<h3><b>What's New</b>:<br/></h3>
Since 2013.07.12:
<p>
<ul>
<li>Fixed getViewByName to also look in native android package(s), not just aut packages.
<li>ProgressIndicator added for RobotiumRC Installs and Overlays.
<li>Enhanced takeScreenshot to use SAFS ImageUtils.
<li>Added SAFS RemoteControl (SAFSDriverCommands and SAFSEngineCommands) for RobotiumRC users of a SAFSTestRunner.
<li>SAFS SoloTest updated to initialize robotiumUtils.
<li><big><b>safs-remotecontrol.jar replaces robotium-remotecontrol.jar with added functionality</b></big>.
<li>SAFS FileUtilities and StringUtilities made available to RobotiumRC.
<li>Fixed emulator boot-completion detection and emulator shutdown for all known emulator CPU types.
</pre>
</ul>
<hr>
</body></html>